import streamlit as st
import pandas as pd
import google.generativeai as genai
from google.generativeai.types import GenerationConfig # Import specific type for clarity

# Configure Gemini API
GOOGLE_API_KEY = st.secrets["GEMINI_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-2.5-flash')

# Persona instructions to guide the model's travel suggestions
PERSONA_INSTRUCTIONS = """
You are a highly knowledgeable and friendly travel guide for Ipoh, Perak. 
Provide concrete, up-to-date suggestions for the user's request. 
Always include estimated costs (in RM) and transportation advice (like 'walkable', 'best reached by Grab'). 
Use relevant emojis and a conversational tone.
"""


def initialize_session_state():
    """Initializes the message history for the chatbot."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Initialize a state variable to hold a prompt generated by a widget button
    if "widget_prompt" not in st.session_state:
        st.session_state.widget_prompt = None


def get_gemini_response(prompt):
    """Generates content using the Gemini API with search grounding for up-to-date info."""
    try:
        # Use GenerationConfig to include Google Search grounding tool
        config = GenerationConfig(
            system_instruction=PERSONA_INSTRUCTIONS,
            tools=[{"googleSearch": {}}]
        )
        
        response = model.generate_content(
            contents=prompt,
            config=config
        )
        return response.text
        
    except Exception as e:
        # Provide a user-friendly error message
        st.error(f"Error communicating with the Gemini API: {e}")
        return "I'm sorry, I hit a snag while trying to connect. Please try again."


def add_suggestion_widgets():
    """Adds Streamlit widgets for quick Ipoh travel suggestions."""
    st.markdown("---")
    st.subheader(" Ipoh Explorer Quick Suggestions")
    
    with st.expander("Click here for Ipoh Travel Ideas! üí°", expanded=True):
        
        col1, col2 = st.columns(2)

        # FOOD button
        if col1.button("üçú Best Food & Coffee"):
            st.session_state.widget_prompt = "What are the absolute must-try local foods and best white coffee spots in Ipoh, including expected cost and how to get there?"
            st.rerun()

        # ATTRACTIONS button
        if col2.button("üèØ Top Attractions & Sights"):
            st.session_state.widget_prompt = "Suggest the top 3 attractions, like cave temples and historical sites in Ipoh, including entrance fees and transportation advice."
            st.rerun()
            
        col3, col4 = st.columns(2)

        # ACCOMMODATION button
        if col3.button("üè® Accommodation Suggestions"):
            st.session_state.widget_prompt = "Suggest three types of accommodation in Ipoh (budget, mid-range, luxury), mentioning their location and typical price range per night."
            st.rerun()

        # TRANSPORTATION button
        if col4.button("üõ∫ Getting Around Ipoh"):
            st.session_state.widget_prompt = "What is the best way for a tourist to get around Ipoh (e.g., Grab, local bus, walking)? Provide tips and estimated costs for a day of travel."
            st.rerun()


def main():
    """Runs the main Streamlit application logic."""
    st.set_page_config(page_title="My First Chatbot", page_icon="ü§ñ")
    st.title("ü§ñ Welcome to Ipoh")
    st.caption("Powered by Gemini 2.5 Flash")

    initialize_session_state()

    user_emoji = "üë§"
    # CORRECTED MISTAKE: Replaced non-existent file path "robot.jpg" with a working emoji
    robot_emoji = "ü§ñ" 

    # --- Suggestion Widgets Section ---
    add_suggestion_widgets()
    
    # --- Chat History Display ---
    for message in st.session_state.messages:
        # CORRECTED MISTAKE: Use robot_emoji instead of robot_img
        avatar = robot_emoji if message["role"] == "assistant" else user_emoji
        with st.chat_message(message["role"], avatar=avatar):
            st.write(f"{message['content']}")

    # --- Handle Widget Prompt ---
    # Process the prompt generated by a button click before handling the text input
    if st.session_state.widget_prompt:
        prompt = st.session_state.widget_prompt
        st.session_state.widget_prompt = None # Clear the prompt after use
        
        # Display the prompt as if the user typed it
        with st.chat_message("user", avatar=user_emoji):
            st.write(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        with st.spinner("Ipoh Explorer is checking the best spots for you..."):
            response = get_gemini_response(prompt)
        
        # Display assistant response
        with st.chat_message("assistant", avatar=robot_emoji):
            st.write(response)
            
        # Add assistant response to history
        st.session_state.messages.append({"role": "assistant", "content": response})
        st.rerun() # Rerun to update chat history cleanly

    # --- Handle Text Input ---
    if prompt := st.chat_input("What's on your mind?"):
        # Display user message
        with st.chat_message("user", avatar=user_emoji):
            st.write(prompt)
        
        # Add user message to history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Get Gemini response
        with st.spinner("Thinking..."):
            response = get_gemini_response(prompt)
            
        # Display assistant response
        with st.chat_message("assistant", avatar=robot_emoji):
            st.write(response)
        
        # Add assistant response to history (This was done twice in your original code, 
        # but I'm keeping one instance here and one in the widget logic for simplicity.)
        st.session_state.messages.append({"role": "assistant", "content": response})


if __name__ == "__main__":
    main()
